# shellcheck shell=bash disable=SC2034

MEDUSA_REPO='pymedusa/Medusa'
MEDUSA_COMMIT_BRANCH='master'

DEFAULT_TARGET_BUILD='alpine'

PYTHON_VERSION='3.8'

CACHE_EXPIRY=86400

BUILD_BUILDX='true'
NO_QEMU='true'

declare -A BUILD_ARGS=( \
	[MEDUSA_COMMIT_BRANCH]='Medusa branch' \
	[MEDUSA_COMMIT_HASH]='Medusa hash' \
	[PLATFORM]='Platform' \
	[FFPROBE_ARCH]='FFprobe arch' \
)

declare -A CHECKOUT_DISPLAY=( \
	[MEDUSA_LATEST]='Medusa latest' \
	[TARGET_BUILD]='Target build' \
	[DOCKER_FILE]='Dockerfile' \
	[MEDUSA_COMMIT_HASH]='Medusa hash' \
	[MEDUSA_VERSION]='Medusa version' \
)

case ${DOCKER_TAG} in
	*debian*)
		SOURCE_REPO="moonbuggy2000/debian-slim-s6-python"
		TARGET_BUILD='debian'
		ARCH_YAML="hooks/arch.${TARGET_BUILD}.yaml"
		EXCLUDED_ARCHES="ppc64le" # no s6-overlay v3
		;;&
	*debian-pypy*)
		SOURCE_REPO="moonbuggy2000/debian-slim-s6-pypy"
		# PYTHON_VERSION='3.7'
		TARGET_BUILD='debian-pypy'
		;;
	*debian*)
		# if we don't match a *pypy* version, match here to prevent
		# debian matching the catch-all
		;;
	*alpine*|latest|*)	# this is the default
		SOURCE_REPO="moonbuggy2000/alpine-s6-python"
		TARGET_BUILD='alpine'
		ARCH_YAML="hooks/arch.${TARGET_BUILD}.yaml"
		ALPINE_VERSION="3.14"	# we can't get the unrar package in 3.15 or newer
		;;&
	*alpine-pypy*)
		SOURCE_REPO="moonbuggy2000/alpine-s6-pypy"
		TARGET_BUILD="alpine-pypy"
		PYTHON_VERSION='3.6'
		;;
esac

post_checkout_start () {
	eval_param_ifn 'MEDUSA_LATEST' "git_latest_release ${MEDUSA_REPO}"

	if [ -z "${MEDUSA_VERSION}" ]; then # determine the Medusa version to install
		local medusa_tag_version
		medusa_tag_version="$(echo ${TARGET_TAG} | grep -Eo '^v?[0-9\.]*')"
		[ -n "${medusa_tag_version}" ] \
			&& MEDUSA_VERSION="${medusa_tag_version}" \
			|| MEDUSA_VERSION="${MEDUSA_LATEST}"
	fi
	add_param "${MEDUSA_VERSION}" 'MEDUSA_VERSION'

	# get the commit hash for the relevant Medusa version
	eval_param_ifn 'MEDUSA_COMMIT_HASH' "git_api_element ${MEDUSA_REPO} git/refs/tags/${MEDUSA_VERSION} sha"

	SOURCE_LATEST="$(docker_api_latest "${SOURCE_REPO}")"
	add_param "${SOURCE_LATEST}" 'source_latest'

	[ -z "${PYTHON_VERSION}" ] \
	 && SOURCE_TAG="${SOURCE_LATEST}" \
	 || SOURCE_TAG="${PYTHON_VERSION}"

	[ "x${TARGET_BUILD}" = 'xalpine' ] \
		&& SOURCE_TAG="${SOURCE_TAG}-alpine${ALPINE_VERSION:-3.14}"

	[ -n "${TARGET_BUILD+set}" ] \
		&& add_param "Dockerfile.${TARGET_BUILD}" 'DOCKER_FILE'
}

## get the target tag
get_target_tag () {
	[ -n "${TARGET_BUILD}" ] \
		&& echo "${MEDUSA_VERSION}-${TARGET_BUILD}" \
		|| echo "${MEDUSA_VERSION}"
}

## get base tags
get_base_tags () {
	local tags && tags=()
	if [ "${MEDUSA_VERSION}" = "${MEDUSA_LATEST}" ]; then
		tags+=("${TARGET_BUILD}")
		[ "${TARGET_BUILD}" = 'alpine' ] && tags+=('latest')
		[ "${TARGET_BUILD}" = 'alpine-pypy' ] && tags+=('pypy' "${MEDUSA_VERSION}-pypy")
	fi
	[ "${TARGET_BUILD}" = "${DEFAULT_TARGET_BUILD}" ] && tags+=("${MEDUSA_VERSION}")

	echo "${tags[@]}"
}

## get manifest tags
get_manifest_tags () {
	local tags && tags+=("$(get_base_tags)")
	if [ "${MEDUSA_VERSION}" = "${MEDUSA_LATEST}" ]; then
		[ "${TARGET_BUILD}" = 'alpine' ] && tags+=('latest')
		[ "${TARGET_BUILD}" = 'alpine-pypy' ] && tags+=('pypy' "${MEDUSA_VERSION}-pypy")
	fi
	echo "${tags[@]}"
}
