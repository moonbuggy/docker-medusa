# syntax = docker/dockerfile:1.4.0

ARG PYPY_VERSION="3.6"
ARG FROM_IMAGE="moonbuggy2000/alpine-s6-pypy:${PYPY_VERSION}"

ARG MEDUSA_COMMIT_BRANCH="master"
ARG MEDUSA_COMMIT_HASH="c302d8ae089a3c41eb8dda166cb71f9a4b39b79e"

ARG APP_PATH="/app"

FROM --platform="${BUILDPLATFORM}" moonbuggy2000/fetcher:latest AS fetcher

## get medusa
#
FROM fetcher AS medusa

ARG APP_PATH
WORKDIR "/fetcher_root${APP_PATH}"

ARG MEDUSA_COMMIT_HASH
RUN git init -q \
	&& git remote add origin https://github.com/pymedusa/Medusa.git \
	&& git fetch --depth=1 origin "${MEDUSA_COMMIT_HASH}" \
	&& git reset --hard FETCH_HEAD \
	&& rm -rf $(cat .dockerignore)


## Get FFprobe
#
FROM fetcher AS ffprobe

WORKDIR /fetcher_root/usr/local/bin/
ARG FFPROBE_ARCH
RUN if [ ! -z "${FFPROBE_ARCH}" ]; then \
		mkdir /ffmpeg-temp; \
		wget -qO- "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-${FFPROBE_ARCH}-static.tar.xz" | tar xJf - --strip-components=1 -C /ffmpeg-temp/; \
		mv "/ffmpeg-temp/ffprobe" .; \
		chmod a+x ffprobe; \
		rm -rf /ffmpeg-temp; \
	fi


## prepare the config
#
# we can use BUILDPLATFORM here for better caching, since we're only copying
# text files to the next stage
#
FROM --platform="${BUILDPLATFORM}" "${FROM_IMAGE}" AS config

COPY root/ /config_root/
WORKDIR /config_root/etc/

# Set some environment variables via cont-init.d
ARG APP_PATH
ARG MEDUSA_COMMIT_BRANCH
ARG MEDUSA_COMMIT_HASH
RUN add-contenv \
		APP_PATH="${APP_PATH}" \
		PYTHON_INTERPRETER=pypy3 \
		MEDUSA_COMMIT_BRANCH="${MEDUSA_COMMIT_BRANCH}" \
		MEDUSA_COMMIT_HASH="${MEDUSA_COMMIT_HASH}" \
	&& cp /etc/contenv_extra ./


## build the image
#
FROM --platform="${TARGETPLATFORM}" "${FROM_IMAGE}"

ARG PUID=1000
ARG PGID=1000

# Install packages
# use a local APK caching proxy, if one is provided
ARG APK_PROXY=""
RUN if [ ! -z "${APK_PROXY}" ]; then \
		alpine_minor_ver="$(grep -o 'VERSION_ID.*' /etc/os-release | grep -oE '([0-9]+\.[0-9]+)')"; \
		mv /etc/apk/repositories /etc/apk/repositories.bak; \
		echo "${APK_PROXY}/alpine/v${alpine_minor_ver}/main" >/etc/apk/repositories; \
		echo "${APK_PROXY}/alpine/v${alpine_minor_ver}/community" >>/etc/apk/repositories; \
	fi \
	&& apk -U add --no-cache \
		git \
		mediainfo \
		shadow \
		tzdata \
		unrar \
	&& ln -s /usr/local/bin/pypy3 /usr/local/bin/python \
	&& addgroup -g ${PGID} medusa \
	&& adduser -DH -u ${PUID} -G medusa medusa \
	&& rm -rf /var/cache/apk/ \
	&& (mv /etc/apk/repositories.bak /etc/apk/repositories || true)

COPY --from=config /config_root/ /
COPY --from=medusa --chown=medusa:medusa /fetcher_root/ /
COPY --from=ffprobe /fetcher_root/ /

ARG APP_PATH
ENV PUID="${PUID}" \
	PGID="${PGID}" \
	PATH="${APP_PATH}:${PATH}" \
	S6_CMD_WAIT_FOR_SERVICES_MAXTIME=120000

WORKDIR "${APP_PATH}"

EXPOSE 8081

VOLUME /config /downloads /tv /anime

ENTRYPOINT [ "/init" ]

HEALTHCHECK --start-period=60s --timeout=10s CMD /healthcheck.sh
