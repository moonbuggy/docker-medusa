GIT_REPO="pymedusa/Medusa"

## parse $DOCKER_TAG
#
case "$DOCKER_TAG" in
	python)
		TARGET_VERSION='latest'
		unset TARGET_BUILD
		;;
	minideb|minideb-pypy|pypy)
		TARGET_VERSION='latest'
		TARGET_BUILD="${DOCKER_TAG}"
		;;
	*-*)
		TARGET_VERSION="${DOCKER_TAG%%-*}"
		TARGET_BUILD="${DOCKER_TAG#*-}"
		;;
	*)
		TARGET_VERSION="$DOCKER_TAG"
		unset TARGET_BUILD
		;;
esac

## get_api_data <request> <output variable name>
#
get_api_data () {
	local temp_data=$( curl -s -w "%{http_code}\n" "https://api.github.com/repos/${GIT_REPO}/${1}" )
	local http_code=$(echo "$temp_data" | tail -n1)
	if [ "$http_code" != "200" ]; then
		echo "HTTP Error: $http_code"
		return 1
	fi
	echo "$temp_data" | sed '$d'
}

LATEST_TAG="$(echo "$(get_api_data "releases/latest")" | sed -rn 's/.*"tag_name"\W+"([^"]+)".*/\1/p')"
LATEST_VERSION="$(echo "${LATEST_TAG}" | sed -rn 's/v?\.?(.*)/\1/p')"
[ "$TARGET_VERSION" = "latest" ]	&& TARGET_TAG="$LATEST_TAG"	&&	TARGET_VERSION="$LATEST_VERSION"

## get target commit hash from tag
#
if [ -z "$TARGET_TAG" ]; then
	target_tag_data="$(get_api_data "git/refs/tags/v.${TARGET_VERSION}")" \
		|| target_tag_data="$(get_api_data "git/refs/tags/v${TARGET_VERSION}")"
else
	target_tag_data="$(get_api_data "git/refs/tags/${TARGET_TAG}")"
fi

if [ -z "${target_tag_data}" ]; then
	echo "Error: Could not match tag '${DOCKER_TAG}' with a Git repo tag."
	exit 1
fi

COMMIT_HASH="$(echo "$target_tag_data" | sed -rn 's/.*sha"\W+"([^"]+)".*/\1/p')"

echo '---'
printf '%-10s%-8s\n' 'latest:' "${LATEST_VERSION}"
printf '%-10s%-8s%-43s%s\n' 'target:' "${TARGET_VERSION}" "${COMMIT_HASH}" "${TARGET_BUILD}"
